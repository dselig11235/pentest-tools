#!/usr/bin/perl -w

use File::Basename qw(dirname);
use Cwd  qw(abs_path);
use lib dirname abs_path __FILE__;
use Term::ANSIColor;

sub colorIfMatch {
    my $color = shift;
    my $match = shift;
    my $text = shift;
    my $out = shift;

    if($text =~ m/(.*)($match)(.*)/) {
        ${$out} =  $1 . colored($2, $color) . $3;
    }
}

$good_color="bright_green";
$warn_color="yellow";
$bad_color="bright_red";

while(<>) {
    my $ln = '';
    
    #kex_aglorithms
    colorIfMatch($good_color, 'curve25519-sha256[^\s]*', $_, \$ln);
    colorIfMatch($bad_color, 'diffie-hellman-group1-sha1[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'diffie-hellman-group14-sha1[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'diffie-hellman-group-exchange-sha1[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'diffie-hellman-group-exchange-sha256[^\s]*', $_, \$ln);
    colorIfMatch($bad_color, 'ecdh-sha2-nistp256[^\s]*', $_, \$ln);
    colorIfMatch($bad_color, 'ecdh-sha2-nistp384[^\s]*', $_, \$ln);
    colorIfMatch($bad_color, 'ecdh-sha2-nistp521[^\s]*', $_, \$ln);

    #server_host_key_algorithms
    #TODO this isn't a complete list (notably DSA and ECDSA)
    colorIfMatch($good_color, 'ssh-ed25519[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'ssh-rsa[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'rsa-sha2-512[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'rsa-sha2-256[^\s]*', $_, \$ln);
    colorIfMatch($bad_color, 'ssh-dss[^\s]*', $_, \$ln);

    #encryption_algorithms
    #des is broken
    colorIfMatch($warn_color, '3des-cbc[^\s]*', $_, \$ln);
    #
    #ssh cbc vulnerability
    colorIfMatch($warn_color, 'aes128-cbc[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'aes192-cbc[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'aes256-cbc[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'rijndael-cbc[^\s]*', $_, \$ln);

    colorIfMatch($good_color, 'aes128-ctr[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'aes192-ctr[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'aes256-ctr[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'aes128-gcm[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'aes256-gcm[^\s]*', $_, \$ln);

    #rc4
    colorIfMatch($warn_color, 'arcfour[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'arcfour128[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'arcfour256[^\s]*', $_, \$ln);

    #64-bit block size - also cbc is vulnerable in ssh
    colorIfMatch($warn_color, 'blowfish-cbc[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'cast128-cbc[^\s]*', $_, \$ln);

    colorIfMatch($good_color, 'chacha20-poly1305[^\s]*', $_, \$ln);

    #mac_algorithms
    colorIfMatch($bad_color, 'hmac-md5[^\s]*', $_, \$ln);
    colorIfMatch($bad_color, 'hmac-md5-96[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'hmac-ripemd160[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'hmac-sha1[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'hmac-sha1-96[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'hmac-sha2-256[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'hmac-sha2-512[^\s]*', $_, \$ln);
    colorIfMatch($bad_color, 'umac-64[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'umac-128[^\s]*', $_, \$ln);
    colorIfMatch($bad_color, 'hmac-md5-etm[^\s]*', $_, \$ln);
    colorIfMatch($bad_color, 'hmac-md5-96-etm[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'hmac-ripemd160-etm[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'hmac-sha1-etm[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'hmac-sha1-96-etm[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'hmac-sha2-256-etm[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'hmac-sha2-512-etm[^\s]*', $_, \$ln);
    colorIfMatch($warn_color, 'umac-64-etm[^\s]*', $_, \$ln);
    colorIfMatch($good_color, 'umac-128-etm[^\s]*', $_, \$ln);

    if($ln eq "") {
        print $_;
    } else {
        print "$ln\n";
    }
}
