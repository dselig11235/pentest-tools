#!/usr/bin/perl

use Text::CSV;
my $csv = Text::CSV->new ({ binary => 1 });

sub encode {
    my $target = shift;
    $target =~ tr'/'%';
    return $target;
}

sub decode {
    my $file = shift;
    $file =~ tr'%'/';
    return $target;
}

sub url_encode {
    my $rv = shift;
    $rv =~ s/([^a-z\d\Q.-_~ \E])/sprintf("%%%2.2X", ord($1))/geix;
    $rv =~ tr/ /+/;
    return $rv;
}

sub url_decode {
    my $rv = shift;
    $rv =~ tr/+/ /;
    $rv =~ s/\%([a-f\d]{2})/ pack 'C', hex $1 /geix;
    return $rv;
}

sub readFromFile {
    my ($filename) = shift;
    local $/ = undef;
    if(open(FILE, "<", "$filename")) {
        return <FILE>;
    } else {
        return '';
    }
    close FILE;
}

open(my $tfile, '<', 'targets.web')
    or die "Couldn't open file targets.web";

while(<$tfile>) {
    chomp;
    my $dir = "web." . encode($_);
    $csv->print(STDOUT, [readFromFile("$dir/sha"), 
                        $_,
                        readFromFile("$dir/code"),
                        readFromFile("$dir/url_effective"),
                        readFromFile("$dir/title"),
                        -s "$dir/inputs" > 0 ? "yes":"no"
                    ]
                );
    print "\n";
    #printf "%s,%s,%s,%s,%s,%s\n", readFromFile("$dir/sha"), $_, readFromFile("$dir/code"),
    #readFromFile("$dir/url_effective"), readFromFile("$dir/title"), 
    #-e "$dir/inputs" ? "yes":"no";
}
