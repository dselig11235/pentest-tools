. $HOME/bin/target-functions.sh
. $HOME/.profile
. $HOME/projects/shellutils/job_pool.sh

pcap_wrap() {
    cmd="$1"
    shift
    tcpdump -i eth0 "$@" &
    local pid=$!
    $cmd
    kill $pid
}

spool_timeout() {
    out="$1"
    shift
    timeout="$1"
    shift
    echo -e "${red}bash-4.3#$nc $@" | tee "$out.spl"
    ("$@" |& tee --append "$out.spl") &
    local pid=$!
    #echo JOBS AFTER STARTING SPOOLJOB
    #ps -flp "$pid"
    #jobs
    #echo
    sleep $timeout
    kill $pid
    #echo JOBS AFTER KILLING SPOOLJOB
    #ps -flp $pid
    #jobs
    #echo
}

spool() {
    out="$1"
    shift
    echo -e "${red}bash-4.3#$nc $@" | tee "$out.spl"
    "$@" |& tee --append "$out.spl"
}

spool_multi() {
    out="$1"
    shift
    touch "$out.spl"
    for cmd in "$@"; do
        echo -e "${red}bash-4.3#$nc ${cmd//\\/\\\\}" | tee --append "$out.spl"
        bash -c "$cmd" |& tee --append "$out.spl"
    done
}

discoverstart() {
    . vars
    (
        echo 1
        echo 1
        echo $COMPANY
        echo $DOMAIN
    ) | discover
}


dnsenumstart() {
    . vars
    spool "DNS Enumeration of $DOMAIN" dnsenum $DOMAIN
}


dnsstart() {
    . ~/bin/target-functions.sh
    . vars
    for target in `cat targets.dns`; do 
        local host=$(gethost "$target")
        local port=$(getport "$target")
        spool "Attempted DNS Zone Transfer on $host" dig axfr @$host "$DOMAIN"
        spool "Test for Open DNS Resolver on $host" nmap -p $port -sUV -Pn --script "dns-recursion" $host
        spool "Fierce DNS Zone Transfer Attempt on $host" fierce -dns $host
    done
}

showikescan() {
    host="$1"
    clear
    fakeprompt ike-scan -M -A -P"$host.ike-psk" "$host"
    if test -e "$host.ike-psk"; then
        echo -e "${red}bash-4.3#$nc cat $host.ike-psk"
        partpsk=$(cut -b -70 "$host.ike-psk")
        echo -e "$partpsk${yellow}...(REDACTED)$nc"
        fakeprompt psk-crack $host.ike-psk
        return 0
    fi
    return 1
}

ikestart() {
    . ~/bin/target-functions.sh
    for host in `cat targets.ike`; do 
        host=$(gethost "$host")
        temp=`mktemp`
        name="Attempted Agressive Mode IKE-Scan on $host"
        showikescan "$host" | tee "$temp"
        if test ${PIPESTATUS[0]} -eq 0; then
            name="IKE Agressive Mode Handshake on $host"
        fi
        mv "$temp" "$name.spl"
    done
}

ncstart() {
    for target in `cat targets.nc`; do
        proto=$(getproto "$target")
        ip=$(gethost "$target")
        port=$(getport "$target")
        #flags="vvq 3 -w 3"
        flags="vv"
        case $proto in
            udp)
                flags=u$flags
                ;;
        esac
        tcpdump -i eth0 -w "Packet Capture of Attempted Connection to $ip:$port.pcap" host $ip &
        local pid=$!
        #echo JOBS AFTER STARTING TCPDUMP
        #ps -flp $pid
        #jobs
        #echo
        sleep 1
        spool_timeout "Attempted Connection to $ip:$port" 8 nc -$flags "$ip" "$port"
        kill $pid
        sleep 1
        #echo JOBS AFTER KILLING TCPDUMP
        #ps -flp $pid
        #jobs
        #echo
    done
}

ntpstart() {
    # https://www.kb.cert.org/vuls/id/348126
    # Check if the amplified responses are enabled
    # Entering the following commands can help users verify if the REQ_MON_GETLIST and REQ_MON_GETLIST_1 
    # responses of NTP are currently enabled:
    # 
    # ntpq -c rv
    # ntpdc -c sysinfo
    # ntpdc -n -c monlist

    for t in `cat targets.ntp`; do
        t=$(gethost "$t")
        spool_multi "NTP Enumeration on $t" \
            "ntpq -c peers -n $t" "ntpq -c readvar -n $t" "ntpdc -c sysinfo $t" "ntpdc -c monlist -n $t"
        spool_multi "NTP Additional Enumeration on $t" \
            "ntpq -c drefid $t" "ntpq -c keytype $t" "ntpq -c associations $t" "ntpq -c apeers $t" 
    #"ntpq -c mreadlist $t associdlow associdhigh"
    done
}

smtpstart() {
    . vars
    MYEMAIL="daniels@tracesecurity.com"
    MYNAME="Daniel Selig"
    for target in `cat targets.smtp`; do 
        target=$(gethost "$target")
        spool "SMTP Internal Spoof Test on $target" iSMTP -i "$MYEMAIL" --SR "'$CONTACT'" --sr "$EMAIL" -m -h "$target"
        spool "SMTP Relay Test on $target" iSMTP -i "$MYEMAIL" -S "'$MYNAME'" -R "'$CONTACT'" -s "$MYEMAIL" -r "$EMAIL" -x -h "$target"
    done
}

snmpstart() {
    for target in `cat targets.snmp`; do
        target=$(gethost "$target")
        # hydra -vv "$target" -P ~/toos/snmppasswords -o snmp-scan.txt snmp
        spool "Attempted SNMP Community String Brute Force Attack" nmap -sU -p 161 --script=snmp-brute "$target"
        spool_multi "Attempted SNMP Enumeration on $target" "snmpcheck $target -v 2c" "snmpwalk -Os -c public -v 2c $target"
        # hydra -vv "$target" -P ~/toos/snmppasswords -o snmp-scan.txt snmp
        spool_multi "Attempted SNMPv3 Enumeration on $target" \
                "snmpwalk -Os -u admin -c public -v 3 $target"
    done
}

sslstart() {
    for target in `cat targets.ssl`; do
        local host=$(gethost $target)
        local port=$(getport $target)
        local name=$(dig -x $host +short)
        sslscan "$host:$port" > sslscan.$host:$port.spl
#        if test -z "$name"
#        then
#            target="$host:$port"
#            spool "SSL Issues on $target Identified with sslscan" sslscan "$target"
#        else
#            target="${name%.}:$port"
#            spool_multi "SSL Issues on $host:$port Identified with sslscan" "dig -x $host +short" \
#                "sslscan '$target'"
#        fi
        echo | spool_multi "SSL Certificate on $target" "openssl s_client -showcerts -servername ${target#:*} -connect $target |& openssl x509 -inform pem -noout -text | head -65"

        out="SSL CCS Injection Detection on $host:$port" 
        spool "$out" nmap --script ssl-ccs-injection -p $port $host
        grep '|   VULNERABLE:' "$out.spl" >& /dev/null || rm "$out.spl"
    done
#    sslscanalyzer.sh targets.ssl -r 4 --do-sslscan -q
    sslparse.pl sslscan.*.spl
}

unknownstart() {
    for t in `cat targets.unknown`; do
        if test 'udp' = $(getproto $t); then
            flags=sUV
        else
            flags=sSV
        fi
        spool "Version Identification of $(gethost $t):$(getport $t) using nmap" \
            nmap -Pn -$flags -T4 --version-all -p $(getport $t) $(gethost $t)
    done
}

host2filename() {
    echo ${target//\//%}
}

getheaders() {
    local target="$1"
    local cleaned=$(host2filename "$target")
    spool "HTTP Get Request Headers on $cleaned" curl -m 30 -ks -D - "$target" -o /dev/null
}

weboptions() {
    target="$1"
    host=${target#*://}
    port=${host#*:}
    host=${host%:*}
    (
        sleep 2
        type "OPTIONS * HTTP/1.1"
        type
    ) &

    clear
    echo -e "${red}bash-4.3#$nc telnet $host $port"
    telnet $host $port
    kill %1
    sleep 1
    sz=$((14*16))
    import -window "$winid" -crop "800x$sz+12+14" "HTTP Options on ${target//:\/\//_}.png"
}
webstart() {
    #job_pool_init 20 0
    for proto in http https
    do
        for t in `cat targets.$proto`
        do
            h=$(gethost $t)
            p=$(getport $t)
            #job_pool_run spool "Nikto on $h:$p" nikto -host $h -port $p -Format html -o "Nikto Results for ${proto}%%$h:$p.html"
            spool "Nikto on $h:$p" nikto -maxtime 4300 -host $h -port $p -Format html -o "Nikto Results for ${proto}%%$h:$p.html"
        done
    done
    for target in `cat targets.web`; do
        cleaned=$(host2filename "$target")
        #weboptions "$target"
        getheaders "$target"
        spool "Directory Enumeration of $cleaned" \
            dirb "$target" <(shuf $HOME/tools/DirBuster-Lists/user-plus-directory-small.txt | head -1000) -w -X .asp,.aspx,.php -o "Directory Enumeration of $cleaned.txt" || true
    done
}

sipstart() {
    for target in `cat targets.sip`; do
        host=$(gethost $target)
        port=$(getport $target)
        spool "SIP Fingerprinting of $host:$port Using sipsak" sipsak -r $port -s sip:$host -vv
        spool "SIP Extensions Enumeration of $host:$port using svwar" svwar -e100-400 $host -p $port -v
    done
}

ldapstart() {
    for target in `cat targets.ldap`; do 
        host=$(gethost $target)
        spool "LDAP Enumeration of $host Using enum4linux" enum4linux $host
    done
}
